name: Unix Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      ignore_buildcache:
        description: 'Ignore buildcache'
        required: true
        type: boolean
      ignore_deps_cache:
        description: 'Ignore dependencies cache'
        required: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  LLVM_VERSION: 16
  GCC_VERSION: 12

jobs:
  env-vars:
    name: Get environment variables
    runs-on: ubuntu-latest
    outputs:
      LLVM_VERSION: ${{ env.LLVM_VERSION }}
      GCC_VERSION: ${{ env.GCC_VERSION }}
    steps:
      - run: echo "ðŸ¤¡ GitHub ðŸ¤¡"

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format
        uses: ./.github/actions/install-llvm
        with:
          version: ${{ env.LLVM_VERSION }}
          packages: clang-format-${{ env.LLVM_VERSION }}

      - name: Format files
        run: find src include -type f -a \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 clang-format-${{ env.LLVM_VERSION }} -i

      - name: Check for differences
        run: |
          git status --porcelain
          git status --porcelain | xargs -I {} -0 test -z \"{}\"

  build:
    runs-on: ${{ matrix.config.os }}
    needs:
      - env-vars
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: macOS x86_64 Release
            os: macos-13
            preset: clang-release
            artifact: macos-x86_64
          - name: macOS arm64 Release
            os: macos-14
            preset: clang-release
            artifact: macos-arm64
          - name: GCC ${{ needs.env-vars.outputs.GCC_VERSION }} Release
            os: ubuntu-latest
            preset: gcc-${{ needs.env-vars.outputs.GCC_VERSION }}-release
            artifact: linux-amd64
          - name: GCC ${{ needs.env-vars.outputs.GCC_VERSION }} Debug
            os: ubuntu-latest
            preset: gcc-${{ needs.env-vars.outputs.GCC_VERSION }}-debug
          - name: Clang ${{ needs.env-vars.outputs.LLVM_VERSION }} Release
            os: ubuntu-latest
            preset: clang-${{ needs.env-vars.outputs.LLVM_VERSION }}-release
          - name: Clang Tidy
            os: ubuntu-latest
            preset: clang-${{ needs.env-vars.outputs.LLVM_VERSION }}-tidy
          - key: Clang ${{ needs.env-vars.outputs.LLVM_VERSION }} Sanitizer
            os: ubuntu-latest
            preset: clang-${{ needs.env-vars.outputs.LLVM_VERSION }}-sanitizer
    env:
      BUILDCACHE_COMPRESS: true
      BUILDCACHE_DIRECT_MODE: true
      BUILDCACHE_ACCURACY: SLOPPY
      BUILDCACHE_LUA_PATH: ${{ github.workspace }}/tools
      BUILDCACHE_DIR: ${{ github.workspace }}/.buildcache
      UBSAN_OPTIONS: halt_on_error=1:abort_on_error=1
      ASAN_SYMBOLIZER_PATH: /usr/lib/llvm-${{ needs.env-vars.outputs.LLVM_VERSION }}/bin/llvm-symbolizer
      CLICOLOR_FORCE: 1
    steps:
      - uses: actions/checkout@v4

      # ==== INSTALL ====
      - name: Update Packages
        if: ${{ !startsWith(matrix.config.os, 'macos-') }}
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get update

      - name: Install LLVM
        if: ${{ !startsWith(matrix.config.os, 'macos-') && startsWith(matrix.config.preset, 'clang') }}
        uses: ./.github/actions/install-llvm
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Install ninja (Ubuntu)
        if: ${{ !startsWith(matrix.config.os, 'macos-') }}
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y --no-install-recommends ninja-build

      - name: Install ninja (macOS)
        if: ${{ startsWith(matrix.config.os, 'macos-') }}
        run: brew install ninja

      # ==== RESTORE CACHE ====
      - name: Restore buildcache Cache
        uses: actions/cache/restore@v4
        id: restore-buildcache
        with:
          path: ${{ github.workspace }}/.buildcache
          key: buildcache-${{ matrix.config.os }}-${{ matrix.config.preset }}-${{ hashFiles('.pkg') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/*.cc') }}
          restore-keys: |
            buildcache-${{ matrix.config.os }}-${{ matrix.config.preset }}-${{ hashFiles('.pkg') }}-${{ hashFiles('**/*.h') }}-
            buildcache-${{ matrix.config.os }}-${{ matrix.config.preset }}-${{ hashFiles('.pkg') }}-
            buildcache-${{ matrix.config.os }}-${{ matrix.config.preset }}-

      - name: Restore Dependencies Cache
        uses: actions/cache/restore@v4
        id: restore-deps-cache
        with:
          path: ${{ github.workspace }}/deps
          key: deps-${{ hashFiles('.pkg') }}
          restore-keys: deps-

      - name: Delete buildcache
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.ignore_buildcache }}
        run: rm -rf ${{ github.workspace }}/.buildcache

      - name: Delete dependencies
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.ignore_deps_cache }}
        run: rm -rf ${{ github.workspace }}/deps

      # ==== BUILD ====
      - name: CMake
        run: cmake -S . -B build --preset=${{ matrix.config.preset }}

      - name: Build
        run: |
          ./build/buildcache/bin/buildcache -z
          cmake --build build --target ppr-preprocess ppr-backend footrouting ppr-benchmark ppr-test
          ./build/buildcache/bin/buildcache -s

      - name: Run Tests
        run: ./build/ppr-test

      # ==== DISTRIBUTION ====
      - name: Strip Executables
        if: matrix.config.artifact != ''
        run: |
          strip build/ppr-preprocess
          strip build/ppr-backend
          strip build/footrouting

      - name: Create Distribution
        if: matrix.config.artifact != ''
        run: |
          mkdir ppr
          mv build/ppr-preprocess ppr
          mv build/ppr-backend ppr
          mv build/footrouting ppr
          mv ui/web ppr
          tar cjf ppr-${{ matrix.config.artifact }}.tar.bz2 ppr

      - name: Upload Distribution
        if: matrix.config.artifact != ''
        uses: actions/upload-artifact@v4
        with:
          name: ppr-${{ matrix.config.artifact }}
          path: ppr-${{ matrix.config.artifact }}.tar.bz2

      # ==== RELEASE ====
      - name: Upload Release
        if: github.event.action == 'published' && matrix.config.artifact != ''
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./ppr-${{ matrix.config.artifact }}.tar.bz2
          asset_name: ppr-${{ matrix.config.artifact }}.tar.bz2
          asset_content_type: application/x-tar

      # ==== SAVE CACHE ====
      - name: Save buildcache Cache
        if: always() && steps.restore-buildcache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/.buildcache
          key: ${{ steps.restore-buildcache.outputs.cache-primary-key }}

      - name: Save Dependencies Cache
        if: always() && steps.restore-deps-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/deps
          key: ${{ steps.restore-deps-cache.outputs.cache-primary-key }}
